# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - ftcc

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Production
    permissions:
      id-token: write
      contents: read #This is required for actions/checkout
    env:
      AZURE_KEYVAULT_URL: ${{ secrets.AZURE_KEYVAULT_URL }}

    steps:
      - uses: actions/checkout@v4

      - name: Login to Azure CLI
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_326B7856498743A2B828B3F3BABABB35 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_7B013E8A26E2442AA8D9B84B3B28C841 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_4EF2626E6B1B479C831DC264D1B2ADC6 }}

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install WeaslyPrint
        run: |
          sudo apt install weasyprint


      - name: Check available packages and install dependencies
        run: |
          sudo apt-get update
          # VerfÃ¼gbare Pakete anzeigen
          apt-cache search libharfbuzz
          apt-cache search libpango
          
          # Basis-Pakete installieren
          sudo apt-get install -y \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libpangoft2-1.0-0 \
            libffi-dev \
            libjpeg-dev \
            libcairo2-dev \
            pkg-config
            # Optional: Neuere Pakete
            sudo apt-get install -y libharfbuzz0b libharfbuzz-subset0 || true
            sudo apt-get install -y libopenjp2-7-dev || sudo apt-get install -y libopenjp2-7

      - name: Run collectstatic
        run: python manage.py collectstatic
      # Optional: Add step to run tests here (PyTest, Django test suites, etc.)

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            release.zip
            !venv/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip


      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_326B7856498743A2B828B3F3BABABB35 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_7B013E8A26E2442AA8D9B84B3B28C841 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_4EF2626E6B1B479C831DC264D1B2ADC6 }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'ftcc'
          slot-name: 'Production'

      - name: Set Azure App Settings
        run: |
          az webapp config appsettings set \
          --name "${{ vars.app_name }}" \
          --resource-group "${{ secrets.RESSOURCE_GROUP_NAME }}" \
          --settings AZURE_KEYVAULT_URL="${{ secrets.AZURE_KEYVAULT_URL }}"


      - name: Set environment variable to .env file
        run: |
          echo "AZURE_KEYVAULT_URL=${{ secrets.AZURE_KEYVAULT_URL }}" >> .env


