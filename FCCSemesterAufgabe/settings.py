"""
Django settings for FCCSemesterAufgabe project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from dotenv import load_dotenv
from pathlib import Path

from Bot import azure_service
from Bot.azure_service.keyvault import AzureKeyVaultService

load_dotenv()
isDocker = True if bool(os.getenv("DOCKER")) == True else False

if  isDocker:
    AZURE_KEYVAULT = ""
else:
    AZURE_KEYVAULT = AzureKeyVaultService(os.environ.get("AZURE_KEYVAULT_URL"))


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

if isDocker:
    SECRET_KEY = os.getenv("SECRET_KEY")
else:
    SECRET_KEY = AZURE_KEYVAULT.get_secret_from_keyvault("SECRET-KEY")



# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    f'{os.getenv("WEBSITE_URL","")}',
    'localhost',
    '127.0.0.1',
    "0.0.0.0"
]

CSRF_TRUSTED_ORIGINS = [
    f'https://{os.getenv("WEBSITE_URL","localhost:8000")}',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Bot.apps.BotConfig',
    'django_tables2',
    'django_filters',
    'phonenumber_field',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'django_injector',
    'widget_tweaks',
    'mssql',
    "django_extensions",

]

CHANNEL_LAYERS = {
     'default': {
         'BACKEND': 'channels.layers.InMemoryChannelLayer'
     }
}

INJECTOR_MODULES = [
    'Bot.injector.AppModule',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)


ROOT_URLCONF = 'FCCSemesterAufgabe.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

#WSGI_APPLICATION = 'FCCSemesterAufgabe.wsgi.application'
ASGI_APPLICATION = 'FCCSemesterAufgabe.asgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if isDocker:
    Name = os.getenv("DB_NAME")
    User = os.getenv('DB_USER')
    Passwort = os.getenv('DB_PASSWORT')
    Host = os.getenv('DB_HOST')
    Port = os.getenv('DB_PORT')
    APP_ID = os.getenv('BOT-APP_ID')
    APP_PASSWORD = os.getenv('BOT_PASSWORD')
else:
    Name = AZURE_KEYVAULT.get_secret_from_keyvault("DB-NAME")
    User = AZURE_KEYVAULT.get_secret_from_keyvault('DB-USER')
    Passwort = AZURE_KEYVAULT.get_secret_from_keyvault('DB-PASSWORT')
    Host = AZURE_KEYVAULT.get_secret_from_keyvault('DB-HOST')
    Port = AZURE_KEYVAULT.get_secret_from_keyvault('DB-PORT')
    APP_ID = AZURE_KEYVAULT.get_secret_from_keyvault('BOT-APP-ID')
    APP_PASSWORD = AZURE_KEYVAULT.get_secret_from_keyvault('BOT-PASSWORT')




DATABASES = {
    'default': {
        'ENGINE': 'mssql',
        'NAME': Name,
        'USER': User,
        'PASSWORD': Passwort,
        'HOST': Host,
        'PORT': Port,
        'OPTIONS': {
            'driver': 'ODBC Driver 18 for SQL Server',
            'encrypt': True,
            'trust_server_certificate': False,
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/


STATIC_URL = "/static/"
STATIC_ROOT=os.path.join(BASE_DIR,'staticfiles')
STATICFILES_DIRS=[
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SITE_ID = 1

LOGIN_REDIRECT_URL = '/adminboard/'
ACCOUNT_LOGOUT_REDIRECT_URL = '/accounts/login/'
ACCOUNT_LOGOUT_ON_GET = True

ACCOUNT_LOGIN_METHODS = {'username'}
ACCOUNT_SIGNUP_FIELDS = ['email', 'username*', 'password1*', 'password2*']

DATE_FORMAT = "%m/%d/%Y"

GRAPH_MODELS ={
    'all_applications': False,
    'graph_models': True,
     }

